"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[4261],{3905:(e,n,t)=>{t.d(n,{Zo:()=>p,kt:()=>f});var a=t(7294);function l(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){l(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function r(e,n){if(null==e)return{};var t,a,l=function(e,n){if(null==e)return{};var t,a,l={},o=Object.keys(e);for(a=0;a<o.length;a++)t=o[a],n.indexOf(t)>=0||(l[t]=e[t]);return l}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)t=o[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(l[t]=e[t])}return l}var s=a.createContext({}),c=function(e){var n=a.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},p=function(e){var n=c(e.components);return a.createElement(s.Provider,{value:n},e.children)},u="mdxType",d={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},m=a.forwardRef((function(e,n){var t=e.components,l=e.mdxType,o=e.originalType,s=e.parentName,p=r(e,["components","mdxType","originalType","parentName"]),u=c(t),m=l,f=u["".concat(s,".").concat(m)]||u[m]||d[m]||o;return t?a.createElement(f,i(i({ref:n},p),{},{components:t})):a.createElement(f,i({ref:n},p))}));function f(e,n){var t=arguments,l=n&&n.mdxType;if("string"==typeof e||l){var o=t.length,i=new Array(o);i[0]=m;var r={};for(var s in n)hasOwnProperty.call(n,s)&&(r[s]=n[s]);r.originalType=e,r[u]="string"==typeof e?e:l,i[1]=r;for(var c=2;c<o;c++)i[c]=t[c];return a.createElement.apply(null,i)}return a.createElement.apply(null,t)}m.displayName="MDXCreateElement"},457:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>s,contentTitle:()=>i,default:()=>u,frontMatter:()=>o,metadata:()=>r,toc:()=>c});var a=t(7462),l=(t(7294),t(3905));const o={sidebar_position:1,description:"Installing the scaffolding bricks"},i="Installing Scaffolding \ud83c\udfac",r={unversionedId:"static-scaffolding/installing",id:"static-scaffolding/installing",title:"Installing Scaffolding \ud83c\udfac",description:"Installing the scaffolding bricks",source:"@site/docs/static-scaffolding/installing.md",sourceDirName:"static-scaffolding",slug:"/static-scaffolding/installing",permalink:"/docs/static-scaffolding/installing",draft:!1,editUrl:"https://github.com/scaffoldinghub-dev/scaffoldinghub-dev.github.io/tree/main/docs/static-scaffolding/installing.md",tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1,description:"Installing the scaffolding bricks"},sidebar:"tutorialSidebar",previous:{title:"Static Scaffolding",permalink:"/docs/category/static-scaffolding"},next:{title:"Initialise Flutter \u2699\ufe0f",permalink:"/docs/static-scaffolding/initialise-flutter"}},s={},c=[],p={toc:c};function u(e){let{components:n,...t}=e;return(0,l.kt)("wrapper",(0,a.Z)({},p,t,{components:n,mdxType:"MDXLayout"}),(0,l.kt)("h1",{id:"installing-scaffolding-"},"Installing Scaffolding \ud83c\udfac"),(0,l.kt)("admonition",{type:"info"},(0,l.kt)("p",{parentName:"admonition"},"Scaffolding depends on the ",(0,l.kt)("a",{parentName:"p",href:"https://dart.dev/get-dart"},"Dart SDK")," being installed on your machine.")),(0,l.kt)("p",null,"Scaffolding depends on a number of ",(0,l.kt)("a",{parentName:"p",href:"https://docs.brickhub.dev/"},"mason")," bricks that take your parametersand generate the flutter/dart code. "),(0,l.kt)("p",null,"We will learn about more of these later, for now you just need to know they can all be used from the scaffolding brick \ud83e\uddf1."),(0,l.kt)("p",null,"To get started lets install mason globally so we get easily use these bricks:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sh"},"\n# \ud83c\udfaf Install mason from https://pub.dev\ndart pub global activate mason_cli\n\n")),(0,l.kt)("p",null,"You will see something similar to the following if this is sucessful:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sh"},"+ archive 3.3.5dencies... \n+ args 2.3.1\n+ async 2.10.0\n+ checked_yaml 2.0.2\n+ cli_completion 0.1.0+1 (0.2.0 available)\n+ cli_util 0.3.5\n+ collection 1.17.0\n+ convert 3.1.1\n+ crypto 3.0.2\n+ equatable 2.0.5\n+ file 6.1.4\n+ http 0.13.5\n+ http_parser 4.0.2\n+ js 0.6.5 (0.6.6 available)\n+ json_annotation 4.7.0\n+ mason 0.1.0-dev.40\n+ mason_api 0.1.0-dev.8\n+ mason_cli 0.1.0-dev.42\n+ mason_logger 0.2.3\n+ meta 1.8.0\n+ mustache_template 2.0.0\n+ path 1.8.3\n+ platform 3.1.0\n+ pointycastle 3.6.2\n+ pool 1.5.1\n+ process 4.2.4\n+ pub_semver 2.1.3\n+ pub_updater 0.2.3\n+ recase 4.1.0\n+ source_span 1.9.1\n+ stack_trace 1.11.0\n+ string_scanner 1.2.0\n+ term_glyph 1.2.1\n+ typed_data 1.3.1\n+ yaml 3.1.1\nBuilding package executables... (1.0s)\nBuilt mason_cli:mason.\nInstalled executable mason.\nActivated mason_cli 0.1.0-dev.42.\n\n")),(0,l.kt)("p",null,"Now you have mason installed. Let's create the project directory and change to it "),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sh"},"# \u2b50\ufe0f Make the directory for your new project \nmkdir static_scaffolding_sample\n\n# Change to the new directory\ncd static_scaffolding_sample\n")),(0,l.kt)("p",null,"Now let's initialise mason and add the scaffolding brick."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sh"},"mason init\n")),(0,l.kt)("p",null,"You will see something similar to the following. "),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sh"},"\u2713 Initializing (21ms)\n\u2713 Getting bricks (23ms)\n\u2713 Generated 1 file(s):\n  ~/dev/static_scaffolding_sample/mason.yaml (new)\n\n...\n")),(0,l.kt)("p",null,"This will add the ",(0,l.kt)("inlineCode",{parentName:"p"},"mason.yaml")," file that looks like the following:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-yaml"},"# Register bricks which can be consumed via the Mason CLI.\n# https://github.com/felangel/mason\nbricks:\n  # Sample Brick\n  # Run `mason make hello` to try it out.\n  hello: any\n  # Bricks can also be imported via git url.\n  # Uncomment the following lines to import\n  # a brick from a remote git url.\n  # widget:\n  #   git:\n  #     url: https://github.com/felangel/mason.git\n  #     path: bricks/widget\n")),(0,l.kt)("p",null,"We will follow the format of the last four lines of ",(0,l.kt)("inlineCode",{parentName:"p"},"mason.yaml")," but remove the comments and the hello example."),(0,l.kt)("p",null,"The last four lines of ",(0,l.kt)("inlineCode",{parentName:"p"},"mason.yaml")," should now look like:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-yaml"},"bricks:\n  scaffolding: ^0.0.2 \n")),(0,l.kt)("p",null,"Afterwards you can get the brick by running"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sh"},"# \ud83d\udcbe get the brick\nmason get\n")),(0,l.kt)("p",null,"You could also have run the following from the command line to achieve the same:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sh"},"# \ud83e\uddf1 Add scaffolding brick to your mason config\nmason add scaffolding\n")),(0,l.kt)("p",null,"\ud83c\udf88 Your brick is now installed "),(0,l.kt)("p",null,"You can confirm where it is cached by running ",(0,l.kt)("inlineCode",{parentName:"p"},"cat .mason/bricks.json"),". "),(0,l.kt)("p",null,"Let's get onto our initialising our flutter project."))}u.isMDXComponent=!0}}]);